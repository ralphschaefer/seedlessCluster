settings {
  actorSystemName = "miniNode"
  instance = 1
  instance = ${?INSTANCE}
  remote {
    hostname = "127.0.0.10"
    hostname = ${?REMOTEHOST}
    port = 0
    port = ${?REMOTEPORT}
    managementport = 10001
    managementport = ${?MANAGEMENTPORT}
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
  management {
    http {
      hostname = ${settings.remote.hostname}
      port = ${settings.remote.managementport}
      bind-hostname = ${settings.remote.hostname}
      bind-port = ${settings.remote.managementport}
    }
    cluster.bootstrap {
      contact-point-discovery {
        service-name = "nodes"
        service-namespace = "mycluster.local"
        effective-name= "nodes.mycluser.local"  # ${?SERVICE_NAME}
      }

      # Configured how we communicate with the contact point once it is discovered
      contact-point {
        # If no port is discovered along with the host/ip of a contact point this port will be used as fallback
        fallback-port = 10001
        # fallback-port = ${?PORT_19999}
      }
    }
  }
  discovery {
    method = "my-service-discovery"
    my-service-discovery {
        class = "my.clusterDemo.serviceDiscovery.MyServiceDiscovery"
        port = 9000
        host = 172.160.22.20
    }
  }
  actor {
    provider = "cluster"
    enable-additional-serialization-bindings = on
    allow-java-serialization = off
    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }
    serialization-bindings {
     "java.io.Serializable" = kryo
    }
    deployment {
      /consumerRoute {
        router = round-robin-group
        routees.paths = ["/user/logEndpoint"]
        cluster = {
          enabled = on
          allow-local-routees = off
          use-roles = ["consumerGroup"]
        }
      }
      /sumRoute {
        router = round-robin-group
        routees.paths = ["/user/sumData"]
        cluster = {
          enabled = on
          allow-local-routees = on
          use-roles = ["consumerGroup"]
        }
      }
      /display {
        router = broadcast-group
        routees.paths = ["/user/displayData"]
        cluster = {
          enabled = on
          allow-local-routees = on
          use-roles = ["consumerGroup"]
        }
      }
    }
  }

  remote {
    log-remote-lifecycle-events = off
    artery {
      enabled = on
      canonical.hostname = ${settings.remote.hostname}
      canonical.port = ${settings.remote.port}
    }
  }


  cluster {
    roles = [consumerGroup]
    shutdown-after-unsuccessful-join-seed-nodes = 40s
  }
}
